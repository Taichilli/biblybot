import asyncio
import logging
import os
import asyncpg
import re
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from models import init_db
import pandas as pd  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç pandas
from io import BytesIO  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
from datetime import datetime, timedelta
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from timezonefinder import TimezoneFinder

tf = TimezoneFinder()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
logging.basicConfig(level=logging.INFO)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_db_pool():
    """–°–æ–∑–¥–∞—ë—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        return await asyncpg.create_pool(DATABASE_URL)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None





async def send_reminders():
    async with db_pool.acquire() as conn:
        schedule = await conn.fetchrow("SELECT * FROM schedule")
        if not schedule:
            return  # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        schedule_timezone = pytz.timezone(schedule["timezone"])
        lesson_time_utc = datetime.strptime(schedule["time"], "%H:%M").time()
        lesson_datetime_utc = schedule_timezone.localize(datetime.combine(datetime.now().date(), lesson_time_utc))

        reminder_1h_utc = lesson_datetime_utc - timedelta(hours=1)
        reminder_1d_utc = lesson_datetime_utc - timedelta(days=1)

        # –†—É—Å—Å–∫–∏–µ –¥–Ω–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
        DAYS_MAP = {
            "–ø–Ω": "mon", "–≤—Ç": "tue", "—Å—Ä": "wed", "—á—Ç": "thu",
            "–ø—Ç": "fri", "—Å–±": "sat", "–≤—Å": "sun"
        }
        lesson_days = [DAYS_MAP[day.strip().lower()] for day in schedule["days"].split(",")]

        now_utc = datetime.now(pytz.utc)

        users = await conn.fetch("SELECT user_id, timezone FROM users")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        for user in users:
            user_tz = pytz.timezone(user["timezone"]) if user["timezone"] else pytz.utc
            user_time = lesson_datetime_utc.astimezone(user_tz).strftime("%H:%M")  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if now_utc.strftime("%a").lower() in lesson_days:
                if reminder_1h_utc <= now_utc < lesson_datetime_utc:
                    await send_reminder(user["user_id"],
                                        f"üì¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ! –°–µ–≥–æ–¥–Ω—è –≤ {user_time} (–ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏) –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ –ø–æ –∫—É—Ä—Å—É –∏–∑—É—á–µ–Ω–∏—è –ë–∏–±–ª–∏–∏.")

                if reminder_1d_utc.date() == now_utc.date():
                    await send_reminder(user["user_id"],
                                        f"üì¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ! –ó–∞–≤—Ç—Ä–∞ –≤ {user_time} (–ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏) –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ –ø–æ –∫—É—Ä—Å—É –∏–∑—É—á–µ–Ω–∏—è –ë–∏–±–ª–∏–∏.")



async def send_reminder(users, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    for user in users:
        try:
            await bot.send_message(user["user_id"], text)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user['user_id']}: {e}")



async def notify_schedule_update():
    async with db_pool.acquire() as conn:
        users = await conn.fetch("SELECT user_id FROM users")

        for user in users:
            try:
                await bot.send_message(user["user_id"],
                                       "üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ. \n "
                                       "–ø–æ –∫–Ω–æ–ø–∫–µ '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ'")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user['user_id']}: {e}")


db_pool = None
scheduler = AsyncIOScheduler()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Registration(StatesGroup):
    full_name = State()
    city = State()
    age = State()
    phone = State()
    telegram = State()


class EditSchedule(StatesGroup):
    text = State()
    days = State()
    time = State()
    timezone = State()


class Broadcast(StatesGroup):
    text = State()


class SearchUser(StatesGroup):
    query = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
after_registration_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")]
    ],
    resize_keyboard=True
)
geo_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
        [KeyboardButton(text="üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")]
    ],
    resize_keyboard=True
)
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤")]
    ],
    resize_keyboard=True
)


@router.message(F.text == "/add_test_users")
async def add_test_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    test_users = [
        (101, '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', '–ú–æ—Å–∫–≤–∞', 25, '+79161234567', '@port_manager_mmvbrts'),
        (102, '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 30, '+79261234568', '@maria_pet'),
        (103, '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–∏–¥–æ—Ä–æ–≤', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 27, '+79371234569', '@alex_s'),
        (104, '–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞', '–ö–∞–∑–∞–Ω—å', 22, '+79481234560', '@olga_smir'),
        (105, '–î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 35, '+79591234561', '@dmitry_k'),
    ]

    async with db_pool.acquire() as conn:
        for user in test_users:
            user_id = int(user[0])  # –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —á–∏—Å–ª–æ
            await conn.execute(
                "INSERT INTO users (user_id, full_name, city, age, phone, telegram) "
                "VALUES ($1, $2, $3, $4, $5, $6) "
                "ON CONFLICT (user_id) DO NOTHING",
                user_id, *user[1:]
            )

    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")


@router.message(F.text == "/clear_db")
async def clear_database(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM users;")
        await conn.execute("DELETE FROM schedule;")
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")


@router.message(F.text == "/start")
async def start_command(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω!", reply_markup=admin_keyboard)
        return

    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", message.from_user.id)

    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=after_registration_keyboard)
    else:
        await message.answer(
            "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–Ω—è! üôè\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –†–æ–º–∞–Ω, —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å –∏–∑—É—á–µ–Ω–∏—è –ë–∏–±–ª–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö.\n"
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(Registration.full_name)


@router.message(Registration.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É:")
    await state.set_state(Registration.city)


@router.message(Registration.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Registration.age)


@router.message(Registration.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram:")
    await state.set_state(Registration.telegram)


@router.message(Registration.telegram)
async def process_telegram(message: types.Message, state: FSMContext):
    await state.update_data(telegram=message.text)
    data = await state.get_data()

    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, full_name, city, age, phone, telegram, timezone)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
        """, message.from_user.id, data['full_name'], data['city'], data['age'], data['phone'], data['telegram'], None)  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–∫–∞ None

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π.\n\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å'.",
        reply_markup=geo_keyboard
    )

    await state.clear()



@router.message(F.text == "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.text)


@router.message(Broadcast.text)
async def process_broadcast(message: types.Message, state: FSMContext):
    async with db_pool.acquire() as conn:
        users = await conn.fetch("SELECT user_id, full_name FROM users")

    sent_users = []
    failed_users = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    caption = message.caption if message.caption else message.text
    media = None

    if message.photo:
        media = types.InputMediaPhoto(media=message.photo[-1].file_id, caption=caption)
    elif message.video:
        media = types.InputMediaVideo(media=message.video.file_id, caption=caption)
    elif message.document:
        media = types.InputMediaDocument(media=message.document.file_id, caption=caption)
    elif message.audio:
        media = types.InputMediaAudio(media=message.audio.file_id, caption=caption)
    elif message.voice:
        media = message.voice.file_id  # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif message.animation:
        media = message.animation.file_id  # GIF-–∞–Ω–∏–º–∞—Ü–∏—è

    for user in users:
        try:
            if media:
                if message.voice:
                    await bot.send_voice(user["user_id"], media, caption=caption)
                elif message.animation:
                    await bot.send_animation(user["user_id"], media, caption=caption)
                else:
                    await bot.send_media_group(user["user_id"], [media])
            else:
                await bot.send_message(user["user_id"], message.text)

            sent_users.append(user["full_name"])
            await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Telegram
        except Exception:
            failed_users.append(user["full_name"])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n"
    if sent_users:
        report += "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏:**\n" + "\n".join(sent_users) + "\n"
    if failed_users:
        report += "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:**\n" + "\n".join(failed_users)

    await message.answer(report)
    await state.clear()


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_search(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchUser.query)


@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ")
async def course_info(message: types.Message):
    async with db_pool.acquire() as conn:
        schedule = await conn.fetchrow("SELECT * FROM schedule")

    if schedule:
        info_text = (f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n{schedule['text']}\n\n"
                     f"üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {schedule['days']}\n"
                     f"‚è∞ –í—Ä–µ–º—è: {schedule['time']} ({schedule['timezone']})")
        await message.answer(info_text)
        await message.answer(open("FAQ.txt", "rb").read())
    else:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")


@router.message(F.location)
async def process_location(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    latitude = message.location.latitude
    longitude = message.location.longitude

    timezone = tf.timezone_at(lat=latitude, lng=longitude)

    if timezone:
        async with db_pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET timezone = $1 WHERE user_id = $2",
                timezone,
                message.from_user.id
            )
        await message.answer(f"‚úÖ –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}", reply_markup=after_registration_keyboard)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (UTC+3).", reply_markup=after_registration_keyboard)



@router.message(F.text == "üìû –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def support_chat(message: types.Message):
    if SUPPORT_USERNAME:
        await message.answer(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:[–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç](https://t.me/{SUPPORT_USERNAME})",
                             parse_mode="Markdown")
    else:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")


@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def edit_schedule(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
    await state.set_state(EditSchedule.text)


@router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤")
async def show_students(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    async with db_pool.acquire() as conn:
        students = await conn.fetch("SELECT full_name, city, age, phone, telegram FROM users")

    if not students:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    df = pd.DataFrame(students, columns=["–§–ò–û", "–ì–æ—Ä–æ–¥", "–í–æ–∑—Ä–∞—Å—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "Telegram"])

    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="–£—á–µ–Ω–∏–∫–∏")

    output.seek(0)
    await message.answer_document(types.BufferedInputFile(output.read(), filename="students.xlsx"))


@router.message(SearchUser.query)
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.lower()
    async with db_pool.acquire() as conn:
        users = await conn.fetch("""
            SELECT * FROM users 
            WHERE LOWER(full_name) LIKE '%' || $1 || '%' 
            OR LOWER(city) LIKE '%' || $1 || '%'
        """, query)


        if not users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            response = "üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n"
            for user in users:
                response += f"üë§ {user['full_name']}, üèô {user['city']}, {user['age']} –≤–æ–∑—Ä–∞—Å—Ç\nüìû {user['phone']}, üì® {user['telegram']}\n\n"
            await message.answer(response)


@router.message(EditSchedule.text)
async def schedule_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω, –°—Ä, –ü—Ç):")
    await state.set_state(EditSchedule.days)


@router.message(EditSchedule.days)
async def schedule_days(message: types.Message, state: FSMContext):
    valid_days = {"–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"}
    input_days = {day.strip().lower() for day in message.text.split(",")}

    if not input_days.issubset(valid_days):
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω, –°—Ä, –ü—Ç.")
        return

    await state.update_data(days=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú):")
    await state.set_state(EditSchedule.time)


@router.message(EditSchedule.time)
async def schedule_time(message: types.Message, state: FSMContext):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:30).")
        return

    await state.update_data(time=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: UTC+3):")
    await state.set_state(EditSchedule.timezone)


@router.message(EditSchedule.timezone)
async def schedule_timezone(message: types.Message, state: FSMContext):
    if not re.match(r"^UTC[+-]\d+$", message.text):
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: UTC+3 –∏–ª–∏ UTC-5).")
        return

    data = await state.get_data()
    async with db_pool.acquire() as conn:
        exists = await conn.fetchrow("SELECT id FROM schedule LIMIT 1")
        if exists:
            await conn.execute(
                "UPDATE schedule SET text = $1, days = $2, time = $3, timezone = $4 WHERE id = $5",
                data['text'], data['days'], data['time'], message.text, exists['id']
            )
        else:
            await conn.execute(
                "INSERT INTO schedule (text, days, time, timezone) VALUES ($1, $2, $3, $4)",
                data['text'], data['days'], data['time'], message.text
            )

        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_keyboard)
        await notify_schedule_update()

        await state.clear()


async def main():
    global db_pool
    db_pool = await create_db_pool()

    if db_pool is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

    await init_db()

    scheduler.start()
    scheduler.add_job(send_reminders, "cron", hour=9, minute=0)  # –ó–∞–ø—É—Å–∫ –≤ 9:00 —É—Ç—Ä–∞
    scheduler.add_job(send_reminders, "cron", hour=18, minute=30)  # –ó–∞–ø—É—Å–∫ –≤ 18:30

    try:
        await dp.start_polling(bot)
    finally:
        await db_pool.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç


if __name__ == "__main__":
    asyncio.run(main())
